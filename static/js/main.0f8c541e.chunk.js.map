{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","api.ts","components/useDisplayPeople/useDisplayPeople.tsx","components/PeoplePage.tsx","components/Navbar.tsx","components/PageHome.tsx","components/PageNotFound.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","PeopleFilters","setSearchParams","sex","get","centuries","getAll","query","className","cn","type","placeholder","onChange","event","target","map","century","includes","selectedNumber","filter","onClick","Loader","PersonLink","person","slug","name","PeopleTable","loading","error","displayPeople","people","sort","sortOrder","selectedPersonId","useParams","getSortedParams","newSortType","born","died","mother","motherName","father","fatherName","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeoplePage","useState","setPeople","setLoading","setError","useEffect","fetchData","data","useMemo","queryFilter","toLowerCase","sexFilter","centuriesFilter","sortBy","filteredPeople","length","Math","ceil","Number","a","b","localeCompare","useDisplayPeople","find","IsLinkActive","isActive","Navbar","role","PageHome","PageNotFound","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.0f8c541e.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null;\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(currentParams.toString());\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate).forEach(([key, value]) => {\n    if (value === null) {\n      newParams.delete(key);\n    } else if (Array.isArray(value)) {\n      // we delete the key to remove old values\n      newParams.delete(key);\n\n      value.forEach((part) => {\n        newParams.append(key, part);\n      });\n    } else {\n      newParams.set(key, value);\n    }\n  });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\n\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n\n  const centuries = searchParams.getAll('centuries') || [];\n  const query = searchParams.get('query') || '';\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchParams(\n      getSearchWith(searchParams, { query: event.target.value || null }),\n    );\n  };\n\n  const toggleCentury = (selectedNumber: string) => {\n    return centuries.includes(selectedNumber)\n      ? centuries.filter((century) => century !== selectedNumber)\n      : [...centuries, selectedNumber];\n  };\n\n  const handleResetFilters = () => {\n    setSearchParams({});\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn({ 'is-active': !sex })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={cn({ 'is-activ': sex === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={cn({ 'is-active': sex === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {['16', '17', '18', '19', '20'].map((century) => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={cn('button', 'mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{ centuries: toggleCentury(century) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: [],\n            sex: null,\n            query: null,\n          }}\n          onClick={handleResetFilters}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ninterface PersonLinkProps {\n  person: Person;\n}\n\nexport const PersonLink: React.FC<PersonLinkProps> = ({ person }) => {\n  return (\n    <Link\n      to={`/people/${person.slug}`}\n      className={cn({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { Loader } from './Loader';\nimport { PersonLink } from './PersonLink';\nimport { Person } from '../types';\n\ninterface PeopleTableProps {\n  people: Person[]\n  loading: boolean;\n  error: boolean;\n  displayPeople: Person[]\n}\n\nexport const PeopleTable:\nReact.FC<PeopleTableProps> = ({\n  loading, error, displayPeople, people,\n}) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const sortOrder = searchParams.get('sortOrder') || '';\n  const { selectedPersonId } = useParams();\n\n  const getSortedParams = (\n    newSortType: string,\n  ): Record<string, string | null> => {\n    if (sort !== newSortType) {\n      return {\n        sort: newSortType,\n        sortOrder: 'ASC',\n      };\n    }\n\n    if (sort === newSortType && sortOrder === 'ASC') {\n      return { sortOrder: 'DESC' };\n    }\n\n    return {\n      sort: null,\n      sortOrder: null,\n    };\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return (\n      <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n        Something went wrong\n      </p>\n    );\n  }\n\n  if (!people) {\n    return <p data-cy=\"noPeopleMessage\">There are no people on the server</p>;\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink params={getSortedParams('name')}>\n                <span className=\"icon\">\n                  <i\n                    className={cn('fas', {\n                      'fa-sort': sort !== 'name',\n                      'fa-sort-up': sort === 'name' && sortOrder === 'ASC',\n                      'fa-sort-down': sort === 'name' && sortOrder === 'DESC',\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink params={getSortedParams('sex')}>\n                <span className=\"icon\">\n                  <i\n                    className={cn('fas', {\n                      'fa-sort': sort !== 'sex',\n                      'fa-sort-up': sort === 'sex' && sortOrder === 'ASC',\n                      'fa-sort-down': sort === 'sex' && sortOrder === 'DESC',\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink params={getSortedParams('born')}>\n                <span className=\"icon\">\n                  <i\n                    className={cn('fas', {\n                      'fa-sort': sort !== 'born',\n                      'fa-sort-up': sort === 'born' && sortOrder === 'ASC',\n                      'fa-sort-down': sort === 'born' && sortOrder === 'DESC',\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink params={getSortedParams('died')}>\n                <span className=\"icon\">\n                  <i\n                    className={cn('fas', {\n                      'fa-sort': sort !== 'died',\n                      'fa-sort-up': sort === 'died' && sortOrder === 'ASC',\n                      'fa-sort-down': sort === 'died' && sortOrder === 'DESC',\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n      <tbody>\n        {displayPeople.map((person) => (\n          <tr\n            key={person.name}\n            data-cy=\"person\"\n            className={cn({\n              'has-background-warning': selectedPersonId === person.slug,\n            })}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.mother ? (\n                <PersonLink person={person.mother} />\n              ) : (\n                person.motherName || '-'\n              )}\n            </td>\n            <td>\n              {person.father ? (\n                <PersonLink person={person.father} />\n              ) : (\n                person.fatherName || '-'\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL\n= 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise((resolve) => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then((response) => response.json());\n}\n","import { useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../../types';\n\nexport const useDisplayPeople = (people: Person[]): Person[] => {\n  const [searchParams] = useSearchParams();\n\n  const displayPeople = useMemo(() => {\n    const queryFilter = searchParams.get('query')?.toLowerCase();\n    const sexFilter = searchParams.get('sex') || '';\n    const centuriesFilter = searchParams.getAll('centuries') || [];\n    const sortOrder = searchParams.get('sortOrder');\n    const sortBy = searchParams.get('sort');\n\n    let filteredPeople = [...people];\n\n    if (queryFilter) {\n      filteredPeople = filteredPeople.filter(\n        (person) => person.name.toLowerCase().includes(queryFilter)\n          || person.sex.toLowerCase().includes(queryFilter),\n      );\n    }\n\n    if (sexFilter) {\n      filteredPeople = filteredPeople.filter(\n        (person) => person.sex === sexFilter,\n      );\n    }\n\n    if (centuriesFilter.length > 0) {\n      filteredPeople = filteredPeople.filter((person) => {\n        return centuriesFilter.includes(\n          Math.ceil(Number(person.born) / 100).toString(),\n        );\n      });\n    }\n\n    if (sortBy === 'name') {\n      filteredPeople.sort((a, b) => {\n        if (sortOrder === 'ASC') {\n          return a.name.localeCompare(b.name);\n        }\n\n        return b.name.localeCompare(a.name);\n      });\n    } else if (sortBy === 'sex') {\n      filteredPeople.sort((a, b) => {\n        if (sortOrder === 'ASC') {\n          return a.sex.localeCompare(b.sex);\n        }\n\n        return b.sex.localeCompare(a.sex);\n      });\n    } else if (sortBy === 'born') {\n      filteredPeople.sort((a, b) => {\n        if (sortOrder === 'ASC') {\n          return a.born - b.born;\n        }\n\n        return b.born - a.born;\n      });\n    } else if (sortBy === 'died') {\n      filteredPeople.sort((a, b) => {\n        if (sortOrder === 'ASC') {\n          return a.born - b.born;\n        }\n\n        return b.born - a.born;\n      });\n    }\n\n    return filteredPeople;\n  }, [people, searchParams]);\n\n  return displayPeople;\n};\n","import { useEffect, useState } from 'react';\nimport { PeopleFilters } from './PeopleFilters';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { useDisplayPeople } from './useDisplayPeople/useDisplayPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<boolean>(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getPeople();\n\n        setPeople(data);\n      } catch (e) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const peopleWithParents = people.map((person) => {\n    const mother = people.find(({ name }) => name === person.motherName);\n    const father = people.find(({ name }) => name === person.fatherName);\n\n    return { ...person, mother, father };\n  });\n\n  const displayPeople = useDisplayPeople(peopleWithParents);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!loading && <PeopleFilters />}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {!displayPeople.length\n              && <p>There are no people matching the search criteria</p>}\n              <PeopleTable\n                people={people}\n                loading={loading}\n                error={error}\n                displayPeople={displayPeople}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nconst IsLinkActive = ({ isActive }: { isActive: boolean }) => {\n  return cn('navbar-item', { 'has-background-grey-lighter': isActive });\n};\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={IsLinkActive}>\n            Home\n          </NavLink>\n          <NavLink to=\"/people\" className={IsLinkActive}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const PageHome = () => <h1 className=\"title\">Home Page</h1>;\n","export const PageNotFound = () => <h1 className=\"title\">Page not found</h1>;\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\nimport { PageHome } from './components/PageHome';\nimport { PageNotFound } from './components/PageNotFound';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<PageHome />} />\n\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":selectedPersonId\" element={<PeoplePage />} />\n            </Route>\n\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"*\" element={<PageNotFound />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement).render(\n  <Router>\n    <App />\n  </Router>,\n);\n"],"sourceRoot":""}